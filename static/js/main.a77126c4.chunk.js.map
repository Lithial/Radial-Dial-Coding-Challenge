{"version":3,"sources":["context/dialContext.js","components/dial/components/indicator.js","components/dial/components/curvedText.js","components/dial/components/halfCircle.js","components/dial/components/quaterCircle.js","assets/Magnifier.svg","assets/Visit Arrow.svg","components/dial/components/centerCircle.js","components/dial/components/ringIcon.js","components/dial/dial.js","components/stateChanger/stateChanger.js","App.js","index.js"],"names":["DialContext","React","createContext","useDial","useContext","DialProvider","children","useState","indicators","setIndicators","Provider","value","addIndicator","type","array","push","removeIndicator","pop","IndicatorRing","numberOfSlices","length","radius","skewCalc","className","map","indicator","index","style","rotate","skew","overflow","top","right","transform","padding","border","returnCorrectStyles","CurvedText","text","objectSize","spacing","offset","d","overlap","r","viewBox","id","width","xlinkHref","startOffset","HalfCircle","QuarterCircle","imgName","imgDesc","src","alt","CenterCircle","mag","visit","getIconPos","position","Math","round","left","margin","RingIcon","mapIndicators","updateIcons","Dial","circleName","StateChanger","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a77126c4.chunk.js","sourcesContent":["import React, {useContext, useState} from 'react';\r\n\r\n/*\r\n I created this context to support dynamically adding indicators\r\n This seemed better than having a JSON list and uncommenting stuff\r\n to update stuff\r\n*/\r\nconst DialContext = React.createContext([]);\r\n\r\n/*\r\nThis lets you call the context on other classes.\r\nWhen you want to use this context call\r\nconst {} = useDial() and use destructuring to pull the data\r\nor function you want.\r\nOptions:\r\n- indicators\r\n- addIndicator\r\n- removeIndicator\r\n*/\r\nexport function useDial(){\r\n    return useContext(DialContext);\r\n}\r\n\r\n/*\r\nThis is the context provider. Surround the component you want to access this\r\nwith this component. Works for all items in tree below so you can put it\r\nat the top of your application.\r\n*/\r\nexport const DialProvider = ({children}) => {\r\n    const initialState =  [ \"unlit\"]\r\n    const [indicators,setIndicators] = useState(initialState);\r\n    /*\r\n    Function to add to the list in the state. Takes in a string,\r\n    either \"unlit\", \"lit\" or \"red\" depending on the indicator.\r\n    * */\r\n    const addIndicator = (type) => {\r\n        let array = [...indicators];\r\n        array.push(type);\r\n        setIndicators(array);\r\n    }\r\n    /*\r\n    Remove the last indicator from the list. I considered taking specific\r\n    items from the array but I decided it was not required at this time.\r\n    */\r\n    const removeIndicator = () => {\r\n        let array = [...indicators];\r\n        array.pop();\r\n        setIndicators(array);\r\n    }\r\n    /*Returns the provider*/\r\n    return (\r\n        <DialContext.Provider value={{indicators, addIndicator,removeIndicator}}>\r\n            {children}\r\n        </DialContext.Provider>\r\n    )\r\n};\r\n\r\nexport default DialProvider;","import React from 'react';\r\nimport {useDial} from \"../../../context/dialContext\";\r\n\r\n/*\r\nAdjustable Styles based on the number of indicators. Special cases for one\r\nand two slices.\r\n*/\r\nconst returnCorrectStyles = (index, numberOfSlices, radius, skewCalc) => {\r\n    let degrees = index * radius\r\n    let rotate = `rotate(${degrees}deg)`\r\n    let skew = `skewY( ${skewCalc}deg)`;\r\n\r\n\r\n    //Switch statement to handle the different styling cases\r\n    switch (numberOfSlices)\r\n    {\r\n        case 1:{\r\n            return {\r\n                overflow: \"visible\",\r\n                top: \"-88%\",\r\n                right: \"10%\",\r\n            }\r\n        }\r\n        case 2: {\r\n            return {\r\n                overflow: \"visible\",\r\n                top: \"-88%\",\r\n                transform: rotate,\r\n                padding: \"2px\",\r\n            }\r\n        }\r\n        default: {\r\n            return {\r\n                overflow: \"hidden\",\r\n                transform: rotate + ' ' + skew,\r\n                border: \"4px solid rgba(255,255,255,.21)\"\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n/*This is the Outer Ring component*/\r\nconst IndicatorRing = () => {\r\n    const {indicators} = useDial(); //call the context\r\n    const numberOfSlices = indicators.length;\r\n    const radius = `${(360/numberOfSlices)}`;\r\n    const skewCalc = `${(360/numberOfSlices) + 90}`;\r\n\r\n    const loadRing = () => {\r\n        //Guard clause for when there are no indicators\r\n        if (!indicators.length){\r\n            return (\r\n                <div className=\"gridItem\">\r\n                    <ul className=\"sliceWrapper\">\r\n\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className=\"gridItem\">\r\n                <ul className=\"sliceWrapper\">\r\n                    {\r\n                        /*Map all of the indicators to a list item*/\r\n                        indicators.map((indicator, index) => {\r\n                            /*Styles are created dynamically so that the indicators appear at\r\n                            the right spot on the circle based on math*/\r\n                            const style = returnCorrectStyles(index, numberOfSlices, radius, skewCalc)\r\n                            return (\r\n                                <li key={`indicator:${index}`} style={style} className={`chunk`}>\r\n                                    <div className={`slice ${indicator}`}/>\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>)\r\n    }\r\n\r\n\r\n    return(\r\n        loadRing()\r\n    )\r\n};\r\n\r\n\r\nexport default IndicatorRing;","import React from 'react';\r\n/*\r\nHere I use an SVG that I borrowed from the internet and modified.\r\nThe text follows along the line using text path.\r\n*/\r\nconst CurvedText = ({ text, objectSize = 90, spacing = 15, offset = 25, overlap = false }) => {\r\n    const d = objectSize + spacing * 2;\r\n    const r = objectSize / 2 + spacing /2;\r\n\r\n    return (\r\n        <div className=\"text\">\r\n            <svg viewBox={`0 0 ${d + offset * 2} ${r + offset * 2}`}>\r\n                <path id=\"curve\" d={`M${offset},${r + offset} A${r},${r} 0 0,1 ${d + offset},${r + offset}`} />\r\n                <text width=\"500\">\r\n                    <textPath xlinkHref=\"#curve\" startOffset=\"50%\">\r\n                        {text}\r\n                    </textPath>\r\n                </text>\r\n            </svg>\r\n        </div>\r\n    )\r\n\r\n};\r\nexport default CurvedText;","import React from 'react';\r\nimport CurvedText from \"./curvedText\";\r\n/*\r\nThis is the top half circle from the gauge.\r\n*/\r\nconst HalfCircle = ({text}) => {\r\n\r\n  return(\r\n      <div className=\"half-circle\">\r\n            <CurvedText text={text}/>\r\n      </div>\r\n  )\r\n};\r\n\r\nexport default HalfCircle;","import React from 'react';\r\n\r\n/*\r\nQuarter circle button components. Made generic to handle both buttons.\r\n*/\r\nconst QuarterCircle = ({className, imgName, imgDesc}) => {\r\n    return (\r\n        <div className={className}>\r\n            <img src={imgName} alt={imgDesc}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuarterCircle;","export default __webpack_public_path__ + \"static/media/Magnifier.8b7b84f8.svg\";","export default __webpack_public_path__ + \"static/media/Visit Arrow.1582e980.svg\";","import React from 'react';\r\nimport HalfCircle from \"./halfCircle\";\r\nimport QuarterCircle from \"./quaterCircle\";\r\nimport mag from '../../../assets/Magnifier.svg'\r\nimport visit from '../../../assets/Visit Arrow.svg'\r\n\r\n/*\r\nThis is the center gauge component. It combines all the Half and\r\nQuarter circle components.\r\n*/\r\nconst CenterCircle = ({text}) => {\r\n    return (\r\n        <div className=\"gridItem\">\r\n            <div className=\"circle-container\">\r\n                <HalfCircle text={text}/>\r\n                <QuarterCircle className=\"mag-circle\" imgName={mag} imgDesc={\"Magnifier Icon\"}/>\r\n                <QuarterCircle className=\"visit-circle\" imgName={visit} imgDesc={\"Visit Icon\"}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CenterCircle;","import React from 'react';\r\nimport {useDial} from \"../../../context/dialContext\";\r\n\r\n/*\r\nThis is where I do some math and magic to make the crosses appear on the\r\nred indicators.\r\n*/\r\n\r\n/*Custom styles for the ring of icons*/\r\nconst getIconPos = (index,numberOfSlices) => {\r\n    let angle = Math.round(360 / numberOfSlices);\r\n    //Don't look at these definitely not hardcoded values for adjusting up\r\n    // to the first 12 indicators\r\n    let bamboolzer = [160,80, 45, 35, 25, 18, 15, 10, 8, 6, 3, 4];\r\n    let position = ((angle * index) - (80)+ bamboolzer[numberOfSlices-1]);\r\n    return{\r\n        position: \"absolute\",\r\n        top: \"97px\",\r\n        left:\"97px\",\r\n        margin: \"30px\",\r\n        transform: `rotate(calc(${position}deg)) translate(118px) rotate(${-position}deg)`\r\n    }\r\n}\r\n\r\n/*The component itself.*/\r\nconst RingIcon = () => {\r\n    //grab the context\r\n    const {indicators} = useDial();\r\n\r\n    // This maps the indicators to list items. It requires the number\r\n    // of slices.\r\n    const mapIndicators = (numberOfSlices) => {\r\n        return indicators.map((indicator, index) => {\r\n            return <li key={`ringIcon:${index}`} style={getIconPos(index, numberOfSlices)} className={`cross ${indicator}`}>\r\n                <span>&#9587;</span>\r\n            </li>\r\n        })\r\n    }\r\n\r\n    // Here we either map the icons or return a blank div if the right\r\n    // conditions are met\r\n\r\n    const updateIcons = () => {\r\n        const numberOfSlices = indicators.length;\r\n        //Guard clause for when we dont want indicators\r\n        if(indicators.length < 0 || indicators.length >11)\r\n        {\r\n            return (<div className=\"gridItem\"/>);\r\n        }\r\n        return (\r\n            <div className=\"gridItem\">\r\n                {mapIndicators(numberOfSlices)}\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n    return (\r\n        updateIcons()\r\n    )\r\n\r\n};\r\n\r\nexport default RingIcon;","import React from 'react';\r\nimport IndicatorRing from \"./components/indicator\";\r\nimport CenterCircle from \"./components/centerCircle\";\r\nimport RingIcon from \"./components/ringIcon\";\r\nimport '../../styles/main.scss';\r\n\r\n/**\r\n This is the main dial component. It is a stack of other components to\r\n keep things tidy, The stack is\r\n - The indicator ring\r\n - The center under circle\r\n - The center gauge component.\r\n */\r\nconst Dial = ({circleName}) => {\r\n    return (\r\n        <div className=\"flexContainer\">\r\n            <div className=\"dial-container\">\r\n                <IndicatorRing/>\r\n                <div className=\"gridItem\">\r\n                    <div className=\"center\"/>\r\n                </div>\r\n                <CenterCircle text={circleName}/>\r\n                <RingIcon/>\r\n                {/*<StateChanger/>*/}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dial;","import React from 'react';\r\nimport {useDial} from \"../../context/dialContext\";\r\n\r\n/*\r\nThis component holds the test buttons. I didn't really style these or anything\r\nbecause they weren't a part of the initial design.\r\n*/\r\nconst StateChanger = () => {\r\n    const {addIndicator, removeIndicator} = useDial();\r\n\r\n    return (\r\n        <div className=\"flexContainer\">\r\n            <div className={\"stateChanger\"}>\r\n                <button className=\"button red\" onClick={() => addIndicator(\"red\")}>Add Red</button>\r\n                <button className=\"button lit\" onClick={() => addIndicator(\"lit\")}>Add Lit</button>\r\n                <button className=\"button unlit\" onClick={() => addIndicator(\"unlit\")}>Add Unlit</button>\r\n                <button className=\"button\" onClick={() => removeIndicator()}>Remove Last</button>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default StateChanger;","import './styles/main.scss';\nimport Dial from \"./components/dial/dial\";\nimport StateChanger from \"./components/stateChanger/stateChanger\";\n\nfunction App() {\n  return (<div className=\"app\">\n    <div className=\"flex\">\n      <Dial circleName=\"Circle Name\"/>\n      <StateChanger/>\n    </div>\n  </div>);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport DialProvider from \"./context/dialContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <DialProvider>\n          <App />\n      </DialProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}